{"ast":null,"code":"import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport en from './en/translation.json';\nconst translationsJson = {\n  en: {\n    translation: en\n  }\n};\nexport const translations = {};\n/*\n * Converts the static JSON file into an object where keys are identical\n * but values are strings concatenated according to syntax.\n * This is helpful when using the JSON file keys and still have the intellisense support\n * along with type-safety\n */\n\nconst convertLanguageJsonToObject = (obj, dict, current) => {\n  Object.keys(obj).forEach(key => {\n    const currentLookupKey = current ? `${current}.${key}` : key;\n\n    if (typeof obj[key] === 'object') {\n      dict[key] = {};\n      convertLanguageJsonToObject(obj[key], dict[key], currentLookupKey);\n    } else {\n      dict[key] = currentLookupKey;\n    }\n  });\n};\n\nexport const i18n = i18next // pass the i18n instance to react-i18next.\n.use(initReactI18next) // detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use(LanguageDetector) // init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  resources: translationsJson,\n  fallbackLng: 'en',\n  debug: true && true,\n  interpolation: {\n    escapeValue: false // not needed for react as it escapes by default\n\n  }\n}, () => {\n  convertLanguageJsonToObject(en, translations);\n});","map":{"version":3,"sources":["/Users/banax/Desktop/code-generation-landing/next/ui/src/locales/i18n.ts"],"names":["i18next","initReactI18next","LanguageDetector","en","translationsJson","translation","translations","convertLanguageJsonToObject","obj","dict","current","Object","keys","forEach","key","currentLookupKey","i18n","use","init","resources","fallbackLng","debug","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,EAAP,MAAe,uBAAf;AAGA,MAAMC,gBAAgB,GAAG;AACvBD,EAAAA,EAAE,EAAE;AACFE,IAAAA,WAAW,EAAEF;AADX;AADmB,CAAzB;AASA,OAAO,MAAMG,YAAwD,GAAG,EAAjE;AAEP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,2BAA2B,GAAG,CAACC,GAAD,EAAWC,IAAX,EAAqBC,OAArB,KAA0C;AAC5EC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,OAAjB,CAAyBC,GAAG,IAAI;AAC9B,UAAMC,gBAAgB,GAAGL,OAAO,GAAI,GAAEA,OAAQ,IAAGI,GAAI,EAArB,GAAyBA,GAAzD;;AACA,QAAI,OAAON,GAAG,CAACM,GAAD,CAAV,KAAoB,QAAxB,EAAkC;AAChCL,MAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,EAAZ;AACAP,MAAAA,2BAA2B,CAACC,GAAG,CAACM,GAAD,CAAJ,EAAWL,IAAI,CAACK,GAAD,CAAf,EAAsBC,gBAAtB,CAA3B;AACD,KAHD,MAGO;AACLN,MAAAA,IAAI,CAACK,GAAD,CAAJ,GAAYC,gBAAZ;AACD;AACF,GARD;AASD,CAVD;;AAWA,OAAO,MAAMC,IAAI,GAAGhB,OAAO,CACzB;AADyB,CAExBiB,GAFiB,CAEbhB,gBAFa,EAGlB;AACA;AAJkB,CAKjBgB,GALiB,CAKbf,gBALa,EAMlB;AACA;AAPkB,CAQjBgB,IARiB,CAShB;AACEC,EAAAA,SAAS,EAAEf,gBADb;AAGEgB,EAAAA,WAAW,EAAE,IAHf;AAIEC,EAAAA,KAAK,EACH,YALJ;AAQEC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACO;;AADP;AARjB,CATgB,EAqBhB,MAAM;AACJhB,EAAAA,2BAA2B,CAACJ,EAAD,EAAKG,YAAL,CAA3B;AACD,CAvBe,CAAb","sourcesContent":["import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en from './en/translation.json';\nimport { ConvertedToObjectType } from './types';\n\nconst translationsJson = {\n  en: {\n    translation: en,\n  },\n};\n\nexport type TranslationResource = typeof en;\nexport type LanguageKey = keyof TranslationResource;\n\nexport const translations: ConvertedToObjectType<TranslationResource> = {} as any;\n\n/*\n * Converts the static JSON file into an object where keys are identical\n * but values are strings concatenated according to syntax.\n * This is helpful when using the JSON file keys and still have the intellisense support\n * along with type-safety\n */\nconst convertLanguageJsonToObject = (obj: any, dict: {}, current?: string) => {\n  Object.keys(obj).forEach(key => {\n    const currentLookupKey = current ? `${current}.${key}` : key;\n    if (typeof obj[key] === 'object') {\n      dict[key] = {};\n      convertLanguageJsonToObject(obj[key], dict[key], currentLookupKey);\n    } else {\n      dict[key] = currentLookupKey;\n    }\n  });\n};\nexport const i18n = i18next\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      resources: translationsJson,\n\n      fallbackLng: 'en',\n      debug:\n        process.env.NODE_ENV !== 'production' &&\n        process.env.NODE_ENV !== 'test',\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n    },\n    () => {\n      convertLanguageJsonToObject(en, translations);\n    },\n  );\n"]},"metadata":{},"sourceType":"module"}