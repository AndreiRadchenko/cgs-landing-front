{"ast":null,"code":"var _jsxFileName = \"/Users/banax/Desktop/code-generation-landing/next/ui/src/app/components/shared/Form/form.component.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Styled from './form.styles';\nimport Input from '../Input/input.commponent';\nimport Textarea from '../Textarea/textarea.component';\nimport Button from '../Button/button.component';\nimport { registrationFormSchema } from '../../../../helpers/validation';\nimport { sendFormEA } from '../../../../services/event';\nimport emailjs from 'emailjs-com';\n\nconst Form = () => {\n  _s();\n\n  const {\n    0: isSubmitted,\n    1: setSubmitted\n  } = useState(false);\n\n  const isEmptyObject = obj => {\n    return JSON.stringify(obj) === '{}';\n  };\n\n  return __jsx(Formik, {\n    validationSchema: registrationFormSchema,\n    initialValues: {\n      name: '',\n      email: '',\n      message: ''\n    },\n    onSubmit: async values => {\n      sendFormEA(values);\n      await emailjs.send('code_generation_sales', 'template_63y7U3ol', values, 'user_qBEngbKseuGY8AfrTEa7E');\n      setSubmitted(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => {\n    return __jsx(Styled.FormWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, __jsx(Input, {\n      placeholder: \"Name\",\n      type: \"text\",\n      name: \"name\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.name,\n      errors: errors,\n      touched: touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }), __jsx(Input, {\n      placeholder: \"Email\",\n      type: \"email\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      errors: errors,\n      touched: touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }), __jsx(Textarea, {\n      placeholder: \"Enter your message...\",\n      name: \"message\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.message,\n      errors: errors,\n      touched: touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), __jsx(Button, {\n      type: \"submit\",\n      disabled: isEmptyObject(touched) || !isEmptyObject(errors) || isSubmitting,\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Send\"), __jsx(Styled.SuccessMessageContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, isSubmitted && __jsx(\"p\", {\n      className: \"success-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"Your message has been successfully delivered. Our Sales team will contact with you.\")));\n  });\n};\n\n_s(Form, \"KHNrcRfPP4Z/D5H0p05rg2up9Y8=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/banax/Desktop/code-generation-landing/next/ui/src/app/components/shared/Form/form.component.tsx"],"names":["React","useState","Formik","Styled","Input","Textarea","Button","registrationFormSchema","sendFormEA","emailjs","Form","isSubmitted","setSubmitted","isEmptyObject","obj","JSON","stringify","name","email","message","values","send","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Styled from './form.styles';\nimport Input from '../Input/input.commponent';\nimport Textarea from '../Textarea/textarea.component';\nimport Button from '../Button/button.component';\nimport { registrationFormSchema } from '../../../../helpers/validation';\nimport { sendFormEA } from '../../../../services/event';\nimport emailjs from 'emailjs-com';\n\nconst Form = () => {\n  const [isSubmitted, setSubmitted] = useState(false);\n\n  const isEmptyObject = obj => {\n    return JSON.stringify(obj) === '{}';\n  };\n  return (\n    <Formik\n      validationSchema={registrationFormSchema}\n      initialValues={{\n        name: '',\n        email: '',\n        message: '',\n      }}\n      onSubmit={async values => {\n        sendFormEA(values);\n\n        await emailjs.send(\n          'code_generation_sales',\n          'template_63y7U3ol',\n          values,\n          'user_qBEngbKseuGY8AfrTEa7E',\n        );\n\n        setSubmitted(true);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => {\n        return (\n          <Styled.FormWrapper>\n            <Input\n              placeholder=\"Name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n              errors={errors}\n              touched={touched}\n            />\n            <Input\n              placeholder=\"Email\"\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              errors={errors}\n              touched={touched}\n            />\n            <Textarea\n              placeholder=\"Enter your message...\"\n              name=\"message\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.message}\n              errors={errors}\n              touched={touched}\n            />\n            <Button\n              type=\"submit\"\n              disabled={\n                isEmptyObject(touched) || !isEmptyObject(errors) || isSubmitting\n              }\n              onClick={handleSubmit}\n            >\n              Send\n            </Button>\n            <Styled.SuccessMessageContainer>\n              {isSubmitted && (\n                <p className=\"success-message\">\n                  Your message has been successfully delivered. Our Sales team\n                  will contact with you.\n                </p>\n              )}\n            </Styled.SuccessMessageContainer>\n          </Styled.FormWrapper>\n        );\n      }}\n    </Formik>\n  );\n};\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}