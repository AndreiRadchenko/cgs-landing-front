{"ast":null,"code":"import _defineProperty from \"/Users/banax/Desktop/code-generation-landing/next/ui/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Combine all reducers in this file and export the combined reducers.\n */\nimport { combineReducers } from '@reduxjs/toolkit';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport function createReducer(injectedReducers = {}) {\n  // Initially we don't have any injectedReducers, so returning identity function to avoid the error\n  if (Object.keys(injectedReducers).length === 0) {\n    return state => state;\n  } else {\n    return combineReducers(_objectSpread({}, injectedReducers));\n  }\n}","map":{"version":3,"sources":["/Users/banax/Desktop/code-generation-landing/next/ui/src/store/reducers.ts"],"names":["combineReducers","createReducer","injectedReducers","Object","keys","length","state"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA,SAASA,eAAT,QAAgC,kBAAhC;;AAIA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAuBC,gBAAsC,GAAG,EAAhE,EAAoE;AACzE;AACA,MAAIC,MAAM,CAACC,IAAP,CAAYF,gBAAZ,EAA8BG,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,WAAOC,KAAK,IAAIA,KAAhB;AACD,GAFD,MAEO;AACL,WAAON,eAAe,mBACjBE,gBADiB,EAAtB;AAGD;AACF","sourcesContent":["/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from '@reduxjs/toolkit';\n\nimport { InjectedReducersType } from 'utils/types/injector-typings';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport function createReducer(injectedReducers: InjectedReducersType = {}) {\n  // Initially we don't have any injectedReducers, so returning identity function to avoid the error\n  if (Object.keys(injectedReducers).length === 0) {\n    return state => state;\n  } else {\n    return combineReducers({\n      ...injectedReducers,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}