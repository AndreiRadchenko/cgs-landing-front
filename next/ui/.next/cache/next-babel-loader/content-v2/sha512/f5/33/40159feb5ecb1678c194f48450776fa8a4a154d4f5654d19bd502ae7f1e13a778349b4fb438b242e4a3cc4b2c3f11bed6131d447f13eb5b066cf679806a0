{"ast":null,"code":"/**\n * Create the store with dynamic reducers\n */\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\nimport createSagaMiddleware from 'redux-saga';\nimport { createReducer } from './reducers';\nexport function configureAppStore() {\n  const reduxSagaMonitorOptions = {};\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const {\n    run: runSaga\n  } = sagaMiddleware; // Create the store with saga middleware\n\n  const middlewares = [sagaMiddleware];\n  const enhancers = [createInjectorsEnhancer({\n    createReducer,\n    runSaga\n  })];\n  const store = configureStore({\n    reducer: createReducer(),\n    middleware: [...getDefaultMiddleware(), ...middlewares],\n    devTools: true,\n    enhancers\n  }); // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/banax/Desktop/code-generation-landing/next/ui/src/store/configureStore.ts"],"names":["configureStore","getDefaultMiddleware","createInjectorsEnhancer","forceReducerReload","createSagaMiddleware","createReducer","configureAppStore","reduxSagaMonitorOptions","sagaMiddleware","run","runSaga","middlewares","enhancers","store","reducer","middleware","devTools","module","hot","accept"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,uBAAT,EAAkCC,kBAAlC,QAA4D,iBAA5D;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,aAAT,QAA8B,YAA9B;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAClC,QAAMC,uBAAuB,GAAG,EAAhC;AACA,QAAMC,cAAc,GAAGJ,oBAAoB,CAACG,uBAAD,CAA3C;AACA,QAAM;AAAEE,IAAAA,GAAG,EAAEC;AAAP,MAAmBF,cAAzB,CAHkC,CAKlC;;AACA,QAAMG,WAAW,GAAG,CAACH,cAAD,CAApB;AAEA,QAAMI,SAAS,GAAG,CAChBV,uBAAuB,CAAC;AACtBG,IAAAA,aADsB;AAEtBK,IAAAA;AAFsB,GAAD,CADP,CAAlB;AAOA,QAAMG,KAAK,GAAGb,cAAc,CAAC;AAC3Bc,IAAAA,OAAO,EAAET,aAAa,EADK;AAE3BU,IAAAA,UAAU,EAAE,CAAC,GAAGd,oBAAoB,EAAxB,EAA4B,GAAGU,WAA/B,CAFe;AAG3BK,IAAAA,QAAQ,MAHmB;AAI3BJ,IAAAA;AAJ2B,GAAD,CAA5B,CAfkC,CAsBlC;;AACA;;AACA,MAAIK,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;AACpChB,MAAAA,kBAAkB,CAACU,KAAD,CAAlB;AACD,KAFD;AAGD;;AAED,SAAOA,KAAP;AACD","sourcesContent":["/**\n * Create the store with dynamic reducers\n */\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { createReducer } from './reducers';\n\nexport function configureAppStore() {\n  const reduxSagaMonitorOptions = {};\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const { run: runSaga } = sagaMiddleware;\n\n  // Create the store with saga middleware\n  const middlewares = [sagaMiddleware];\n\n  const enhancers = [\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ];\n\n  const store = configureStore({\n    reducer: createReducer(),\n    middleware: [...getDefaultMiddleware(), ...middlewares],\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers,\n  });\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}